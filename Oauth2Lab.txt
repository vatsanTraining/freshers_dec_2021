1) Add Web and oauth2ResourceServer

2) Update pom.xml 


<dependency>
<groupId>org.springframework.cloud</groupId>
<artifactId>spring-cloud-starter-oauth2</artifactId>
<version>2.2.5.RELEASE</version>
</dependency>

<dependency>
<groupId>org.springframework.cloud</groupId>
<artifactId>spring-cloud-starter</artifactId>
<version>3.1.1</version>

</dependency>

3) Add @EnableResourceServer

4) Create a Rest Controller  

5) Invoke the service and check
=====================================================================
Authorization Server


AuthorizationServerConfigurerAdapter 

	
	@Autowired
	BCryptPasswordEncoder encoder;
	
	@Autowired
	AuthenticationManager manger;

	@Override
	public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {

		 security.checkTokenAccess("isAuthenticated()").tokenKeyAccess("isAuthenticated()");
		 
	}

	@Override
	public void configure(ClientDetailsServiceConfigurer clients) throws Exception {

		clients.inMemory()
		  .withClient("myclient")
		    .secret(encoder.encode("pass123"))
		     .scopes("read","write")
		      .authorizedGrantTypes("password")
		        .accessTokenValiditySeconds(3000)
		          .refreshTokenValiditySeconds(6000);
	}


	@Override
	public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
    
		 endpoints.authenticationManager(manger);
	}
	
	
}
===================================================================
WebSecurityConfigurerAdapter

@Autowired
	private BCryptPasswordEncoder encoder;
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {

		
		  auth.inMemoryAuthentication().withUser("india").password(encoder.encode("india")).roles("ADMIN")
		  .and()
		   .withUser("nepal").password(encoder.encode("nepal")).roles("USER");
	
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {

		http
		  .authorizeRequests()
		     .antMatchers("/oauth/token").permitAll();
		
	}

	@Override
	@Bean
	public AuthenticationManager authenticationManagerBean() throws Exception {
		return super.authenticationManagerBean();
	}
	
=============================================================

package com.example.demo.entity;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "cibil_score")
public class CibilScore {

	@Id
        @Column(name="panid")
	private String panId;
@Column(name="cardholdername")
	private String cardHolderName;
@Column(name="pincode")
	private long pinCode;
@Column(name="score")
	private double score;
	
	


	
import com.example.demo.entity.CibilScore;


public interface CibilScoreRepository extends JpaRepository<CibilScore, String> {

}



}


import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.entity.CibilScore;
import com.example.demo.repos.CibilScoreRepository;

import lombok.Setter;

@Service
public class CibilScoreService {

	
	@Autowired
	private CibilScoreRepository repo;
	
	
	public List<CibilScore> findAll(){
		
		
		return this.repo.findAll();
		
		
	}
	
	public CibilScore findScoreByPan(String panId) {
		
		return this.repo.findById(panId).get();
		
	}
	public CibilScore  add(CibilScore entity) {
		
		return this.repo.save(entity);
	}
	
	 public CibilScore remove(CibilScore entity) {
		   
		    CibilScore resp = null;
		   
		 if(repo.existsById(entity.getPanId())) {
		    
		    repo.delete(entity);
		    
		    resp= entity;
		    } 
		    
		    return resp;
		   }

}





